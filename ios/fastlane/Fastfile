# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  before_all do
    # Only run setup_ci when explicitly forcing certificate creation
    if ENV['CI'] && (ENV['MATCH_FORCE_WRITE'] == true || ENV['MATCH_FORCE_WRITE'] == 'true')
      setup_ci
    end
  end

  desc "Load App Store Connect API Key"
  private_lane :load_asc_api_key do
    app_store_connect_api_key(
      key_id: ENV["ASC_KEY_ID"],
      issuer_id: ENV["ASC_ISSUER_ID"],
      key_content: ENV["ASC_PRIVATE_KEY"],
      duration: 1200, # optional (maximum 1200)
      in_house: false # optional but may be required if using match/sigh
    )
  end

  desc "Sync certificates and provisioning profiles"
  lane :sync_certificates do
    load_asc_api_key
    match(
      type: "appstore",
      platform: "ios",
      force: ENV['MATCH_FORCE_WRITE'] == 'true',
      readonly: ENV['CI'] && (ENV['MATCH_FORCE_WRITE'] != true && ENV['MATCH_FORCE_WRITE'] != 'true')
    )
  end

  desc "Build the app for release"
  lane :build_release do
    # Load signing certificates
    sync_certificates
    
    # Increment build number based on current timestamp
    increment_build_number(
      build_number: latest_testflight_build_number(app_identifier: "app.cawcaw") + 1,
      xcodeproj: "App/App.xcodeproj"
    )
    
    # Build the app
    build_app(
      scheme: "App",
      workspace: "App/App.xcworkspace",
      export_method: "app-store",
      codesigning_identity: "Apple Distribution",
      xcargs: "CODE_SIGN_IDENTITY='Apple Distribution' CODE_SIGN_STYLE=Manual PROVISIONING_PROFILE_SPECIFIER='match AppStore app.cawcaw'",
      export_options: {
        method: "app-store",
        signingStyle: "manual",
        provisioningProfiles: {
          "app.cawcaw" => "match AppStore app.cawcaw"
        },
        signingCertificate: "Apple Distribution"
      }
    )
  end

  desc "Upload to TestFlight"
  lane :upload_testflight do
    load_asc_api_key
    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      distribute_external: false,
      notify_external_testers: false,
      changelog: "Built with GitHub Actions"
    )
  end

  desc "Build and upload to TestFlight"
  lane :beta do
    build_release
    upload_testflight
    
    # Send success notification
    if ENV['CI']
      puts "‚úÖ Successfully uploaded build to TestFlight!"
      puts "üîó Check your build at: https://appstoreconnect.apple.com"
    end
  end

  desc "Build for local testing"
  lane :build_local do
    load_asc_api_key
    match(type: "development")
    build_app(
      scheme: "App",
      workspace: "App/App.xcworkspace",
      export_method: "development"
    )
  end

  desc "Download certificates for development"
  lane :certificates_development do
    load_asc_api_key
    match(
      type: "development",
      platform: "ios"
    )
  end

  desc "Download certificates for distribution"
  lane :certificates_distribution do
    load_asc_api_key
    match(
      type: "appstore",
      platform: "ios",
      readonly: ENV['CI'] && (ENV['MATCH_FORCE_WRITE'] != true && ENV['MATCH_FORCE_WRITE'] != 'true')
    )
  end

  # ==========================================
  # Ad Hoc Distribution Lanes
  # ==========================================
  
  desc "Sync Ad Hoc certificates and provisioning profiles"
  lane :sync_certificates_adhoc do
    load_asc_api_key
    match(
      type: "adhoc",
      platform: "ios",
      force: ENV['MATCH_FORCE_WRITE'] == 'true',
      readonly: ENV['CI'] && (ENV['MATCH_FORCE_WRITE'] != true && ENV['MATCH_FORCE_WRITE'] != 'true')
    )
  end

  desc "Download certificates for Ad Hoc distribution"
  lane :certificates_adhoc do
    load_asc_api_key
    match(
      type: "adhoc",
      platform: "ios",
      readonly: ENV['CI'] && (ENV['MATCH_FORCE_WRITE'] != true && ENV['MATCH_FORCE_WRITE'] != 'true')
    )
  end

  desc "Build the app for Ad Hoc distribution"
  lane :build_adhoc do
    # Load signing certificates for Ad Hoc
    sync_certificates_adhoc
    
    # Increment build number based on timestamp for Ad Hoc builds
    build_number = Time.now.strftime("%Y%m%d%H%M")
    increment_build_number(
      build_number: build_number,
      xcodeproj: "App/App.xcodeproj"
    )
    
    # Build the app for Ad Hoc distribution
    build_app(
      scheme: "App",
      workspace: "App/App.xcworkspace",
      export_method: "ad-hoc",
      codesigning_identity: "Apple Distribution",
      xcargs: "CODE_SIGN_IDENTITY='Apple Distribution' CODE_SIGN_STYLE=Manual PROVISIONING_PROFILE_SPECIFIER='match AdHoc app.cawcaw'",
      export_options: {
        method: "ad-hoc",
        signingStyle: "manual",
        provisioningProfiles: {
          "app.cawcaw" => "match AdHoc app.cawcaw"
        },
        signingCertificate: "Apple Distribution"
      },
      output_name: "caw_caw",
      include_bitcode: false,
      include_symbols: true
    )
    
    # Success notification
    if ENV['CI']
      puts "‚úÖ Successfully built Ad Hoc distribution!"
      puts "üìÅ IPA Location: #{lane_context[SharedValues::IPA_OUTPUT_PATH]}"
      puts "üì± Ready for direct device installation"
    end
  end

  # Error handling
  error do |lane, exception|
    puts "‚ùå Error in lane #{lane}: #{exception}"
    if ENV['CI']
      puts "Check the GitHub Actions logs for more details"
    end
  end
end